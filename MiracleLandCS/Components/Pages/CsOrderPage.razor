@page "/Order"
@inject OrderService OrderService
@inject NavigationManager Navigation
@inject AuthService Authen
@using MiracleLandCS.Models
@using MiracleLandCS.Services
<div class="container mt-5">
    <h1 class="text-center">Your Orders</h1>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (orders != null && orders.Count > 0)
    {
        <div class="row">
            @foreach (var order in orders)
            {
                <div class="col-md-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Order ID: @order.Orderid</h5>
                            <p class="card-text"><strong>Total Price:</strong> $@order.Total</p>
                            <p class="card-text"><strong>Payment Status:</strong> @(order.IsPayment ? "Paid" : "Pending")</p>
                            <button class="btn btn-primary" @onclick="() => ViewOrderDetails(order.Orderid)">View Details</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center" role="alert">
            No orders found.
        </div>
    }

    @if (orderDetails != null && orderDetails.Any())
    {
        <div class="mt-5">
            <h3>Order Details</h3>
            <ul class="list-group">
                @foreach (var detail in orderDetails)
                {
                    <li class="list-group-item">
                        <strong>Product ID:</strong> @detail.Pid |
                        <strong>Quantity:</strong> @detail.Quantity
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code {
    private List<CsOrdersRequest>? orders;
    private List<CsOrderDetailRequest>? orderDetails;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            var token = await SecureStorage.GetAsync("auth_token");
            if (!string.IsNullOrEmpty(token))
            {
                orders = await OrderService.GetUserOrdersAsync(token);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading orders: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ViewOrderDetails(Guid orderId)
    {
        orderDetails = await OrderService.GetOrderDetailsAsync(orderId);
    }
}
